{"version":3,"sources":["components/navbar.js","hoc/rainbow.js","components/fire.js","components/wind.js","components/earth.js","components/lightning.js","components/water.js","components/post.js","App.js","serviceWorker.js","reducers/initialReducer.js","index.js"],"names":["App","console","log","this","props","className","href","id","to","React","Component","withRouter","Rainbow","Comp","handleClick","window","location","posts","length","map","item","key","title","body","connect","state","deletePost","history","push","post","onClick","ownProps","match","params","post_id","find","dispatch","type","path","component","Fire","Earth","Water","Lightning","Wind","Post","Boolean","hostname","initialState","rootReducer","action","filter","store","createStore","inititialReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.174780d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link,withRouter}  from \"react-router-dom\";\r\nclass App extends React.Component {\r\n  render(){\r\n    console.log(this.props);\r\n  return (\r\n    <div className=\"App\">\r\n      <nav className=\"\">\r\n        <div className=\"nav-wrapper container\">\r\n          <a href=\"\" className=\"brand-logo\">Ninja Way</a>\r\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n            <li><Link to=\"fire.html\">Fire</Link></li>\r\n            <li><Link to=\"earth.html\">Earth.</Link></li>\r\n            <li><Link to=\"lightning.html\">lightning</Link></li>\r\n            <li><Link to=\"wind.html\">Wind</Link></li>\r\n            <li><Link to=\"water.html\">water</Link></li>\r\n\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      </div>\r\n  );\r\n}\r\n}\r\nexport default withRouter(App);\r\n","import React from \"react\";\r\nconst Rainbow =(Comp)=>{\r\n  return(props)=>{\r\n    return(\r\n      <div className=\"red-text\">\r\n      < Comp {...props} />\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Rainbow\r\n","import React from 'react';\r\nimport Rainbow from \"../hoc/rainbow.js\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\"\r\nclass App extends React.Component {\r\n\r\n  // componentDidMount(){\r\n  //   axios.get(\"https://jsonplaceholder.typicode.com/posts\")\r\n  //        .then((res)=>{\r\n  //                       //console.log(res);\r\n  //                       this.setState({posts:res.data.slice(0,20)})})\r\n  // }\r\n  handleClick=(id)=>{\r\n    window.location.href = \"./\"+id;\r\n  }\r\n  render(){\r\n    //console.log(this.props);\r\n    var posts=\"\";\r\n    if(this.props.posts.length == 0){\r\n      posts = <div className=\"\">No posts yet!</div>\r\n\r\n    }\r\n    else{\r\n      posts= this.props.posts;\r\n      posts=posts.map((item)=>{\r\n        return(\r\n                    <div className=\"row\" key={item.id} /*onClick={()=>{this.handleClick(item.id)}}*/>\r\n                      <div className=\"col s12 m12\">\r\n                        <div className=\"card red darken-1\" >\r\n                          <div className=\"card-content white-text\">\r\n                            <Link to={'/' + item.id}>\r\n                                <span className=\"card-title white-text\">{item.title}</span>\r\n                            </Link>\r\n                            <p>{item.body}</p>\r\n                          </div>\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n        )\r\n      })\r\n    }\r\n  return (\r\n    <div className=\"container\">\r\n    {posts}\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  //var id=ownProps.match.params.post_id;\r\n  return(\r\n    {\r\n      posts:state.posts/*.find((post)=>{post.id===id})*/\r\n    }\r\n  )\r\n}\r\nexport default connect(mapStateToProps)(Rainbow(App));\r\n","import React from 'react';\r\nclass App extends React.Component {\r\n  render(){\r\n  return (\r\n    <div className=\"App container\">\r\n     < h2 className=\"\" >Wind Nation</h2>\r\n     <p className=\"flow-text\">The Land of Wind (火の国, Hi no Kuni) is one of the largest and most powerful countries seen, and is the home of the main characters of the series. Its government leader is the Fire Daimyō. The Land of Fire was the first country to adopt a ninja village, Konohagakure, a custom other countries would soon adopt. The Land of Fire is appropriately oriented towards the element of fire, typically having very bright and warm weather. While not the physically largest country, it has the largest hidden village.</p>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nclass App extends React.Component {\r\n  render(){\r\n  return (\r\n    <div className=\"App container\">\r\n     < h2 className=\"\" >Earth Nation</h2>\r\n     <p className=\"flow-text\">The Land of earth (火の国, Hi no Kuni) is one of the largest and most powerful countries seen, and is the home of the main characters of the series. Its government leader is the Fire Daimyō. The Land of Fire was the first country to adopt a ninja village, Konohagakure, a custom other countries would soon adopt. The Land of Fire is appropriately oriented towards the element of fire, typically having very bright and warm weather. While not the physically largest country, it has the largest hidden village.</p>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nclass App extends React.Component {\r\n  render(){\r\n  return (\r\n    <div className=\"App container\" >\r\n     < h2 className=\"\" >lightning Nation</h2>\r\n     <p className=\"flow-text\">The Land of lightning (火の国, Hi no Kuni) is one of the largest and most powerful countries seen, and is the home of the main characters of the series. Its government leader is the Fire Daimyō. The Land of Fire was the first country to adopt a ninja village, Konohagakure, a custom other countries would soon adopt. The Land of Fire is appropriately oriented towards the element of fire, typically having very bright and warm weather. While not the physically largest country, it has the largest hidden village.</p>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nclass App extends React.Component {\r\n  render(){\r\n  return (\r\n    <div className=\"App container\">\r\n     < h2 className=\"\" >Water Nation</h2>\r\n     <p className=\"flow-text\">The Land of Water (火の国, Hi no Kuni) is one of the largest and most powerful countries seen, and is the home of the main characters of the series. Its government leader is the Fire Daimyō. The Land of Fire was the first country to adopt a ninja village, Konohagakure, a custom other countries would soon adopt. The Land of Fire is appropriately oriented towards the element of fire, typically having very bright and warm weather. While not the physically largest country, it has the largest hidden village.</p>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport Rainbow from \"../hoc/rainbow.js\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass App extends React.Component {\r\n\r\n  // componentDidMount(){\r\n  //   axios.get(\"https://jsonplaceholder.typicode.com/posts\")\r\n  //        .then((res)=>{\r\n  //                       //console.log(res);\r\n  //                       this.setState({posts:res.data.slice(0,20)})})\r\n  // }\r\n  handleClick=()=>{\r\n    var id = this.props.posts.id;\r\n    this.props.deletePost(id);\r\n    this.props.history.push(\"../fire.html\");\r\n  }\r\n  render(){\r\n    console.log(\"ho\");\r\n    var post=\"\";\r\n    if(!this.props.posts){\r\n      post = <div className=\"\">Still Loading</div>\r\n\r\n    }\r\n    else{\r\n      post= this.props.posts;\r\n              post= ( <div className=\"row\" key={post.id}>\r\n                      <div className=\"col s12 m12\">\r\n                        <div className=\"card red darken-1\" >\r\n                          <div className=\"card-content white-text\">\r\n                            <span className=\"card-title\">{post.title}</span>\r\n                            <p>{post.body}</p>\r\n                            <div className=\"center\">\r\n                            <button className=\"btn grey\" onClick={ this.handleClick}>Delete</button>\r\n                          </div>\r\n                         </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>);\r\n   }\r\n  return(\r\n    <div className=\"container\">\r\n    {post}\r\n    </div>);\r\n}\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps)=> {\r\n    var id = ownProps.match.params.post_id;\r\n  return(\r\n    {\r\n      posts:state.posts.find((item)=>item.id == id)\r\n    }\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deletePost: (id) => dispatch({type: 'DELETE_POST', id: id})\r\n  }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Rainbow(App));\r\n","import React from 'react';\nimport { BrowserRouter,Route}  from \"react-router-dom\";\nimport Navbar from \"./components/navbar.js\";\n\nimport Fire from \"./components/fire.js\";\nimport Wind from \"./components/wind.js\";\nimport Earth from \"./components/earth.js\";\nimport Lightning from \"./components/lightning.js\";\nimport Water from \"./components/water.js\";\nimport Post from \"./components/post.js\";\n\nclass App extends React.Component {\n  render(){\n  return (\n    <div className=\"App \">\n    <BrowserRouter>\n      < Navbar />\n      <Route path=\"/fire.html\" component={ Fire}/>\n      <Route path=\"/earth.html\" component={ Earth}/>\n      <Route path=\"/water.html\" component={ Water}/>\n      <Route path=\"/lightning.html\" component={ Lightning}/>\n      <Route path=\"/wind.html\" component={ Wind }/>\n\n      <Route path=\"/:post_id\" component={ Post }/>\n\n      </BrowserRouter>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  posts:[\r\n\r\n  {\r\n    \"userId\": 1,\r\n    \"id\": 1,\r\n    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\r\n    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\r\n  },\r\n  {\r\n    \"userId\": 1,\r\n    \"id\": 2,\r\n    \"title\": \"qui est esse\",\r\n    \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\r\n  },\r\n  {\r\n    \"userId\": 1,\r\n    \"id\": 3,\r\n    \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\r\n    \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\"\r\n  },\r\n  {\r\n    \"userId\": 1,\r\n    \"id\": 4,\r\n    \"title\": \"eum et est occaecati\",\r\n    \"body\": \"ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit\"\r\n  },\r\n  {\r\n    \"userId\": 1,\r\n    \"id\": 5,\r\n    \"title\": \"nesciunt quas odio\",\r\n    \"body\": \"repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque\"\r\n  }\r\n  ]\r\n}\r\nconst rootReducer=(state=initialState,action)=>{\r\n  if(action.type=\"delete_post\")\r\n  {\r\n    var posts = state.posts;\r\n    posts = posts.filter((item)=>{\r\n      return item.id !== action.id;\r\n    })\r\n    return{\r\n      ...state,\r\n      posts\r\n    }\r\n  }\r\n  return state;\r\n\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport inititialReducer from \"./reducers/initialReducer.js\";\n\nconst store = createStore(inititialReducer);\nReactDOM.render(<Provider store ={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}